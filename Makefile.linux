# Linux-specific Makefile for model_inference example

# Check make version (requires make 3.82+)
ifneq (3.82,$(firstword $(sort $(MAKE_VERSION) 3.82)))
  $(error "Requires make version 3.82 or later (current is $(MAKE_VERSION))")
endif

# Compiler settings for Linux
CXX := g++
CXXFLAGS := -std=c++11 -O3 -Wall -Wextra \
           -DTF_LITE_STATIC_MEMORY \
           -DTF_LITE_USE_GLOBAL_CMATH_FUNCTIONS \
           -DTF_LITE_USE_GLOBAL_MIN \
           -DTF_LITE_USE_GLOBAL_MAX \
           -fPIC \
           -DNDEBUG
LDFLAGS := -lm -lpthread

# Include paths
INCLUDES := \
    -I. \
    -I../tensorflow \
    -Itensorflow \
    -I../tensorflow/lite/micro/tools/make/downloads/flatbuffers/include \
    -I../tensorflow/lite/micro/tools/make/downloads/gemmlowp \
    -I../tensorflow/lite/micro/tools/make/downloads/ruy \
    -I../tensorflow/lite/micro/tools/make/downloads \
    -Itensorflow/tensorflow/lite/micro/tools/make/downloads/flatbuffers/include \
    -Itensorflow/tensorflow/lite/micro/tools/make/downloads/gemmlowp \
    -Itensorflow/tensorflow/lite/micro/tools/make/downloads/ruy

# Application source files
APP_SRCS := \
    model_inference.cc \
    model_data.cc

# Core TFLM source files
CORE_SRCS := \
    tensorflow/tensorflow/lite/micro/micro_error_reporter.cc \
    tensorflow/tensorflow/lite/micro/micro_interpreter.cc \
    tensorflow/tensorflow/lite/micro/micro_allocator.cc \
    tensorflow/tensorflow/lite/micro/simple_memory_allocator.cc \
    tensorflow/tensorflow/lite/micro/memory_helpers.cc \
    tensorflow/tensorflow/lite/micro/debug_log.cc \
    tensorflow/tensorflow/lite/micro/micro_string.cc \
    tensorflow/tensorflow/lite/micro/micro_time.cc \
    tensorflow/tensorflow/lite/micro/micro_utils.cc \
    tensorflow/tensorflow/lite/micro/memory_planner/greedy_memory_planner.cc \
    tensorflow/tensorflow/lite/c/common.c \
    tensorflow/tensorflow/lite/core/api/error_reporter.cc \
    tensorflow/tensorflow/lite/core/api/flatbuffer_conversions.cc \
    tensorflow/tensorflow/lite/core/api/op_resolver.cc \
    tensorflow/tensorflow/lite/kernels/internal/quantization_util.cc \
    tensorflow/tensorflow/lite/kernels/kernel_util.cc \
    tensorflow/tensorflow/lite/schema/schema_utils.cc

# Kernel source files (exactly matching compile_part3.sh)
KERNEL_SRCS := \
    tensorflow/tensorflow/lite/micro/kernels/conv.cc \
    tensorflow/tensorflow/lite/micro/kernels/pooling.cc \
    tensorflow/tensorflow/lite/micro/kernels/fully_connected.cc \
    tensorflow/tensorflow/lite/micro/kernels/softmax.cc \
    tensorflow/tensorflow/lite/micro/kernels/reshape.cc \
    tensorflow/tensorflow/lite/micro/kernels/quantize.cc \
    tensorflow/tensorflow/lite/micro/kernels/dequantize.cc \
    tensorflow/tensorflow/lite/micro/kernels/activations.cc \
    tensorflow/tensorflow/lite/micro/kernels/kernel_util.cc \
    tensorflow/tensorflow/lite/micro/kernels/shape.cc \
    tensorflow/tensorflow/lite/micro/kernels/strided_slice.cc \
    tensorflow/tensorflow/lite/micro/kernels/pack.cc

# Combine all source files
ALL_SRCS := $(APP_SRCS) $(CORE_SRCS) $(KERNEL_SRCS)

# Target executable
TARGET := model_inference

# Default target
all: $(TARGET)

# Build target
$(TARGET): check-dependencies $(APP_SRCS)
	@echo "üîÑ Building TensorFlow Lite Micro application for Linux..."
	@echo "üìù Using TensorFlow Lite Micro v2.4.0 compatible build"
	@echo "üêß Linux-optimized build with g++"
	$(CXX) $(CXXFLAGS) $(INCLUDES) $(ALL_SRCS) -o $(TARGET) $(LDFLAGS)
	@echo "‚úÖ Build complete: $(TARGET)"
	@echo "üìä Binary size: $$(ls -lh $(TARGET) | awk '{print $$5}')"

# Run the application
run: $(TARGET)
	@echo "üöÄ Running TensorFlow Lite Micro inference on Linux..."
	./$(TARGET)

# Clean generated files
clean:
	rm -f $(TARGET)
	@echo "Clean complete"

# Check dependencies
check-dependencies:
	@echo "üîç Checking Linux build dependencies..."
	@which g++ > /dev/null || (echo "‚ùå Error: g++ not found. Please install build-essential package." && exit 1)
	@echo "‚úÖ g++ compiler found"
	@echo "‚úÖ Dependencies check passed"

# Show build information
info:
	@echo "üìã Linux Build Information:"
	@echo "  Compiler: $(CXX)"
	@echo "  Flags: $(CXXFLAGS)"
	@echo "  Linker flags: $(LDFLAGS)"
	@echo "  Target: $(TARGET)"
	@echo "  Source files: $(words $(ALL_SRCS)) files"

# Help target
help:
	@echo "üìñ Available targets:"
	@echo "  all          - Build the application (default)"
	@echo "  run          - Build and run the application"
	@echo "  clean        - Remove generated files"
	@echo "  check-dependencies - Check if required tools are available"
	@echo "  info         - Show build configuration"
	@echo "  help         - Show this help message"
	@echo ""
	@echo "Usage:"
	@echo "  make          # Build the application"
	@echo "  make run      # Build and run"
	@echo "  make clean    # Clean up"

.PHONY: all run clean check-dependencies info help
